<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".cs" #>
<#
	var separators = new List<(string Type, bool Generic, string Test)>()
	{
		( Type: "char", Generic: false, Test: "letter == separator" ),
		( Type: "ICollection<char>", Generic: true, Test: "separator.Contains(letter)" ),
		( Type: "Predicate<char>", Generic: false, Test: "separator(letter)" ),
		( Type: "char[]", Generic: false, Test: "Contains(separator, letter)" ),
	};
	var valuesAdds = new List<(string Type, bool Generic, string Add)>()
	{
		( Type: "ICollection<string>", Generic: true, Add: "values.Add(value)" ),
		( Type: "Action<string>", Generic: false, Add: "values(value)" ),
	};
	var columnsINDXs = new List<(string Type, bool Generic, string Property)>()
	{
		(Type: "int[]", Generic: false, Property: "Length"),
		(Type: "IList<int>", Generic: true, Property: "Count"),
	};
	var valuesSets = new List<(string Type, bool Generic, string Set)>()
	{
		(Type: "string[]", Generic: false, Set: "values[columnsColumn] = value" ),
		(Type: "IList<string>", Generic: true, Set: "values[columnsColumn] = value" ),
//		(Type: "IDictionary<int, string>", Generic: true, Set: "values[columnsColumn] = value" ),//conflicts with IList<string>
		(Type: "Action<int, string>", Generic: false, Set: "values(columnsColumn, value)" ),
	};
	bool line;
#>
using System;
using System.Collections.Generic;
using System.Text;

namespace Innovoft.IO
{
	partial class SplitReader
	{
		#region Methods
<#
	line = false;
#>
<#
	foreach (var separator in separators)
	{
		foreach (var values in valuesAdds)
		{
			if (line)
			{
#>

<#
			}
			else
			{
				line = true;
			}
			if (separator.Generic)
			{
				if (values.Generic)
				{
#>
		public bool ReadColumns<TSeparator, TValues>(TSeparator separator, TValues values)
			where TSeparator: <#= separator.Type #> where TValues: <#= values.Type #>
<#
				}
				else
				{
#>
		public bool ReadColumns<TSeparator>(TSeparator separator, <#= values.Type #> values)
			where TSeparator: <#= separator.Type #>
<#
				}
			}
			else
			{
				if (values.Generic)
				{
#>
		public bool ReadColumns<TValues>(<#= separator.Type #> separator, TValues values)
			where TValues: <#= values.Type #>
<#
				}
				else
				{
#>
		public bool ReadColumns(<#= separator.Type #> separator, <#= values.Type #> values)
<#
				}
			}
#>
		{
			if (stream == null)
			{
				throw new ObjectDisposedException(nameof(SplitReader));
			}
			if (lettersOffset >= lettersLength && !ReadBuffers())
			{
				return false;
			}
			var offset = lettersOffset;
			var building = false;
			while (true)
			{
				var letter = letters[lettersOffset];
				switch (letter)
				{
				case CR:
					if (building)
					{
						builder.Append(letters, offset, lettersOffset - offset);
						var value = builder.ToString();
						<#= values.Add #>;
						builder.Clear();
					}
					else
					{
						var value = new string(letters, offset, lettersOffset - offset);
						<#= values.Add #>;
					}
					++lettersOffset;
					//LF
					if (lettersOffset >= lettersLength)
					{
						if (!ReadBuffers())
						{
							return true;
						}
					}
					if (letters[lettersOffset] == LF)
					{
						++lettersOffset;
					}
					return true;

				case LF:
					if (building)
					{
						builder.Append(letters, offset, lettersOffset - offset);
						var value = builder.ToString();
						<#= values.Add #>;
						builder.Clear();
						++lettersOffset;
						return true;
					}
					else
					{
						var value = new string(letters, offset, lettersOffset - offset);
						<#= values.Add #>;
						++lettersOffset;
						return true;
					}

				default:
					if (<#= separator.Test #>)
					{
						if (building)
						{
							builder.Append(letters, offset, lettersOffset - offset);
							var value = builder.ToString();
							<#= values.Add #>;
							builder.Clear();
							building = false;
							offset = ++lettersOffset;
							break;
						}
						else
						{
							var value = new string(letters, offset, lettersOffset - offset);
							<#= values.Add #>;
							offset = ++lettersOffset;
							break;
						}
					}
					else
					{
						++lettersOffset;
					}
					break;
				}
				if (lettersOffset >= lettersLength)
				{
					if (offset <= lettersOffset)
					{
						builder.Append(letters, offset, lettersOffset - offset);
						building = true;
					}
					if (!ReadBuffers())
					{
						if (building)
						{
							var value = builder.ToString();
							<#= values.Add #>;
							builder.Clear();
						}
						return true;
					}
					offset = 0;
				}
			}
		}
<#
		}
	}
#>
<#
	foreach (var separator in separators)
	{
		if (line)
		{
#>

<#
		}
		else
		{
			line = true;
		}
		if (separator.Generic)
		{
#>
		public bool ReadColumns<TSeparator>(TSeparator separator, int column, out string value)
			where TSeparator: <#= separator.Type #>
<#
		}
		else
		{
#>
		public bool ReadColumns(<#= separator.Type #> separator, int column, out string value)
<#
		}
#>
		{
			if (stream == null)
			{
				throw new ObjectDisposedException(nameof(SplitReader));
			}
			if (lettersOffset >= lettersLength && !ReadBuffers())
			{
				value = null;
				return false;
			}
			var offset = lettersOffset;
			var building = false;
			string columnValue = null;
			while (true)
			{
				var letter = letters[lettersOffset];
				switch (letter)
				{
				case CR:
					if (column == 0)
					{
						if (building)
						{
							builder.Append(letters, offset, lettersOffset - offset);
							columnValue = builder.ToString();
							builder.Clear();
						}
						else
						{
							columnValue = new string(letters, offset, lettersOffset - offset);
						}
					}
					++lettersOffset;
					//LF
					if (lettersOffset >= lettersLength)
					{
						if (!ReadBuffers())
						{
							value = columnValue;
							return true;
						}
					}
					if (letters[lettersOffset] == LF)
					{
						++lettersOffset;
					}
					value = columnValue;
					return true;

				case LF:
					if (column == 0)
					{
						if (building)
						{
							builder.Append(letters, offset, lettersOffset - offset);
							columnValue = builder.ToString();
							builder.Clear();
							++lettersOffset;
							value = columnValue;
							return true;
						}
						else
						{
							columnValue = new string(letters, offset, lettersOffset - offset);
							++lettersOffset;
							value = columnValue;
							return true;
						}
					}
					else
					{
						++lettersOffset;
						value = columnValue;
						return true;
					}

				default:
					if (<#= separator.Test #>)
					{
						if (column == 0)
						{
							if (building)
							{
								builder.Append(letters, offset, lettersOffset - offset);
								columnValue = builder.ToString();
								builder.Clear();
								building = false;
								offset = ++lettersOffset;
								--column;
								break;
							}
							else
							{
								columnValue = new string(letters, offset, lettersOffset - offset);
								offset = ++lettersOffset;
								--column;
								break;
							}
						}
						else
						{
							offset = ++lettersOffset;
							--column;
							break;
						}
					}
					else
					{
						++lettersOffset;
					}
					break;
				}
				if (lettersOffset >= lettersLength)
				{
					if (column == 0)
					{
						if (offset <= lettersOffset)
						{
							builder.Append(letters, offset, lettersOffset - offset);
							building = true;
						}
					}
					if (!ReadBuffers())
					{
						if (building)
						{
							columnValue = builder.ToString();
							builder.Clear();
						}
						value = columnValue;
						return true;
					}
					offset = 0;
				}
			}
		}
<#
	}
#>
<#
	foreach (var separator in separators)
	{
		foreach (var columns in columnsINDXs)
		{
			foreach (var values in valuesSets)
			{
				if (line)
				{
#>

<#
				}
				else
				{
					line = true;
				}
				var generic = separator.Generic || columns.Generic || values.Generic;
				string parameters;
				string where;
				if (generic)
				{
					var parameterss = new List<string>(3);
					var wheres = new List<string>(3);
					if (separator.Generic)
					{
						parameterss.Add("TSeparator");
						wheres.Add("where TSeparator: " + separator.Type);
					}
					if (columns.Generic)
					{
						parameterss.Add("TColumns");
						wheres.Add("where TColumns: " + columns.Type);
					}
					if (values.Generic)
					{
						parameterss.Add("TValues");
						wheres.Add("where TValues: " + values.Type);
					}
					parameters = "<" + string.Join(", ", parameterss) + ">";
					where = string.Join(" ", wheres);
				}
				else
				{
					parameters = "";
					where = null;
				}
#>
		public bool ReadColumns<#= parameters #>(<#= separator.Generic ? "TSeparator" : separator.Type #> separator, <#= columns.Generic ? "TColumns" : columns.Type #> columns, <#= values.Generic ? "TValues" : values.Type #> values)
<#
				if (generic)
				{
#>
			<#= where #>
<#
				}
#>
		{
			if (stream == null)
			{
				throw new ObjectDisposedException(nameof(SplitReader));
			}
			var columnsColumn = columns[0];
			var columnsOffset = 0;
			if (lettersOffset >= lettersLength && !ReadBuffers())
			{
				while (true)
				{
					var value = default(string);
					<#= values.Set #>;
					++columnsOffset;
					if (columnsOffset >= columns.<#= columns.Property #>)
					{
						break;
					}
					columnsColumn = columns[columnsOffset];
				}
				return false;
			}
			var offset = lettersOffset;
			var building = false;
			var column = 0;
			while (true)
			{
				var letter = letters[lettersOffset];
				switch (letter)
				{
				case CR:
					//Column
					if (column == columnsColumn)
					{
						if (building)
						{
							builder.Append(letters, offset, lettersOffset - offset);
							var value = builder.ToString();
							<#= values.Set #>;
							++columnsOffset;
							if (columnsOffset < columns.<#= columns.Property #>)
							{
								columnsColumn = columns[columnsOffset];
							}
							builder.Clear();
						}
						else
						{
							var value = new string(letters, offset, lettersOffset - offset);
							<#= values.Set #>;
							++columnsOffset;
							if (columnsOffset < columns.<#= columns.Property #>)
							{
								columnsColumn = columns[columnsOffset];
							}
						}
					}
					++lettersOffset;
					//Columns
					if (columnsOffset < columns.<#= columns.Property #>)
					{
						while (true)
						{
							var value = default(string);
							<#= values.Set #>;
							++columnsOffset;
							if (columnsOffset >= columns.<#= columns.Property #>)
							{
								break;
							}
							columnsColumn = columns[columnsOffset];
						}
					}
					//LF
					if (lettersOffset >= lettersLength)
					{
						if (!ReadBuffers())
						{
							return true;
						}
					}
					if (letters[lettersOffset] == LF)
					{
						++lettersOffset;
					}
					return true;

				case LF:
					//Column
					if (column == columnsColumn)
					{
						if (building)
						{
							builder.Append(letters, offset, lettersOffset - offset);
							var value = builder.ToString();
							<#= values.Set #>;
							++columnsOffset;
							if (columnsOffset < columns.<#= columns.Property #>)
							{
								columnsColumn = columns[columnsOffset];
							}
							builder.Clear();
						}
						else
						{
							var value = new string(letters, offset, lettersOffset - offset);
							<#= values.Set #>;
							++columnsOffset;
							if (columnsOffset < columns.<#= columns.Property #>)
							{
								columnsColumn = columns[columnsOffset];
							}
						}
					}
					++lettersOffset;
					//Columns
					if (columnsOffset < columns.<#= columns.Property #>)
					{
						while (true)
						{
							var value = default(string);
							<#= values.Set #>;
							++columnsOffset;
							if (columnsOffset >= columns.<#= columns.Property #>)
							{
								break;
							}
							columnsColumn = columns[columnsOffset];
						}
					}
					return true;

				default:
					if (<#= separator.Test #>)
					{
						if (column == columnsColumn)
						{
							if (building)
							{
								builder.Append(letters, offset, lettersOffset - offset);
								var value = builder.ToString();
								<#= values.Set #>;
								++columnsOffset;
								if (columnsOffset < columns.<#= columns.Property #>)
								{
									columnsColumn = columns[columnsOffset];
								}
								else
								{
									columnsColumn = -1;
								}
								builder.Clear();
								building = false;
								offset = ++lettersOffset;
								++column;
								break;
							}
							else
							{
								var value = new string(letters, offset, lettersOffset - offset);
								<#= values.Set #>;
								++columnsOffset;
								if (columnsOffset < columns.<#= columns.Property #>)
								{
									columnsColumn = columns[columnsOffset];
								}
								else
								{
									columnsColumn = -1;
								}
								offset = ++lettersOffset;
								++column;
								break;
							}
						}
						else
						{
							offset = ++lettersOffset;
							++column;
							break;
						}
					}
					else
					{
						++lettersOffset;
					}
					break;
				}
				if (lettersOffset >= lettersLength)
				{
					if (column == columnsColumn)
					{
						if (offset <= lettersOffset)
						{
							builder.Append(letters, offset, lettersOffset - offset);
							building = true;
						}
					}
					if (!ReadBuffers())
					{
						//Column
						if (building)
						{
							var value = builder.ToString();
							<#= values.Set #>;
							++columnsOffset;
							if (columnsOffset < columns.<#= columns.Property #>)
							{
								columnsColumn = columns[columnsOffset];
							}
							builder.Clear();
						}
						//Columns
						if (columnsOffset < columns.<#= columns.Property #>)
						{
							while (true)
							{
								var value = default(string);
								<#= values.Set #>;
								++columnsOffset;
								if (columnsOffset >= columns.<#= columns.Property #>)
								{
									break;
								}
								columnsColumn = columns[columnsOffset];
							}
						}
						return true;
					}
					offset = 0;
				}
			}
		}
<#
			}
		}
	}
#>
		#endregion //Methods
	}
}
