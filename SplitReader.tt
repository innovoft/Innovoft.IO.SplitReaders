<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	var separators = new List<(string Type, string Test)>()
	{
		( Type: "char", Test: "letter == separator" ),
		( Type: "HashSet<char>", Test: "separator.Contains(letter)" ),
		( Type: "List<char>", Test: "separator.Contains(letter)" ),
		( Type: "ICollection<char>", Test: "separator.Contains(letter)" ),
		( Type: "Predicate<char>", Test: "separator(letter)" ),
		( Type: "char[]", Test: "Contains(separator, letter)" ),
	};
	var valuesAdds = new List<(string Type, string Add)>()
	{
		( Type: "List<string>", Add: "values.Add(value)" ),
		( Type: "ICollection<string>", Add: "values.Add(value)" ),
		( Type: "Action<string>", Add: "values(value)" ),
	};
	bool line;
#>
using System;
using System.Collections.Generic;
using System.Text;

namespace Innovoft.IO
{
	partial class SplitReader
	{
		#region Methods
<#
	line = false;
#>
<#
	foreach (var separator in separators)
	{
		foreach (var values in valuesAdds)
		{
			if (line)
			{
#>

<#
			}
			else
			{
				line = true;
			}
#>
		public bool ReadColumnsAdd(<#= separator.Type #> separator, <#= values.Type #> values)
		{
			if (stream == null)
			{
				throw new ObjectDisposedException(nameof(SplitReader));
			}
			if (lettersOffset >= lettersLength && !ReadBuffers())
			{
				return false;
			}
			var offset = lettersOffset;
			var building = false;
			while (true)
			{
				var letter = letters[lettersOffset];
				switch (letter)
				{
				case CR:
					if (building)
					{
						builder.Append(letters, offset, lettersOffset - offset);
						var value = builder.ToString();
						<#= values.Add #>;
						builder.Clear();
					}
					else
					{
						var value = new string(letters, offset, lettersOffset - offset);
						<#= values.Add #>;
					}
					++lettersOffset;
					//LF
					if (lettersOffset >= lettersLength)
					{
						if (!ReadBuffers())
						{
							return true;
						}
					}
					if (letters[lettersOffset] == LF)
					{
						++lettersOffset;
					}
					return true;

				case LF:
					if (building)
					{
						builder.Append(letters, offset, lettersOffset - offset);
						var value = builder.ToString();
						<#= values.Add #>;
						builder.Clear();
						++lettersOffset;
						return true;
					}
					else
					{
						var value = new string(letters, offset, lettersOffset - offset);
						<#= values.Add #>;
						++lettersOffset;
						return true;
					}

				default:
					if (<#= separator.Test #>)
					{
						if (building)
						{
							builder.Append(letters, offset, lettersOffset - offset);
							var value = builder.ToString();
							<#= values.Add #>;
							builder.Clear();
							building = false;
							offset = ++lettersOffset;
							break;
						}
						else
						{
							var value = new string(letters, offset, lettersOffset - offset);
							<#= values.Add #>;
							offset = ++lettersOffset;
							break;
						}
					}
					else
					{
						++lettersOffset;
					}
					break;
				}
				if (lettersOffset >= lettersLength)
				{
					if (offset <= lettersOffset)
					{
						builder.Append(letters, offset, lettersOffset - offset);
						building = true;
					}
					if (!ReadBuffers())
					{
						if (building)
						{
							var value = builder.ToString();
							<#= values.Add #>;
							builder.Clear();
						}
						return true;
					}
					offset = 0;
				}
			}
		}
<#
		}
	}
#>
		#endregion //Methods
	}
}
