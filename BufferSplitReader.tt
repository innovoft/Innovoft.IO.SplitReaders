<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".cs" #>
<#
	var separators = new List<(string Type, bool Generic, string Test)>()
	{
		( Type: "byte", Generic: false, Test: "letter == separator" ),
		( Type: "ICollection<byte>", Generic: true, Test: "separator.Contains(letter)" ),
		( Type: "Predicate<byte>", Generic: false, Test: "separator(letter)" ),
		( Type: "byte[]", Generic: false, Test: "Contains(separator, letter)" ),
	};
	var methods = new List<(string Name, string Math)>()
	{
		( Name: "Length", Math: "bufferOffset - offset"),
		( Name: "Ending", Math: "bufferOffset"),
	};
	var appendss = new List<(string Type, bool Generic, string Name, string Get)>()
	{
		( Type: "Action<byte[], int, int>[]", Generic: false, Name: "", Get: "append = column < appends.Length ? appends[column] : null" ),
		( Type: "IList<Action<byte[], int, int>>", Generic: true, Name: "", Get: "append = column < appends.Count ? appends[column] : null" ),
		( Type: "IDictionary<int, Action<byte[], int, int>>", Generic: true, Name: "Dictionary", Get: "appends.TryGetValue(column, out append)" ),
		( Type: "Func<int, Action<byte[], int, int>>", Generic: false, Name: "", Get: "append = appends(column)" ),
	};
	bool line;
#>
using System;
using System.Collections.Generic;
using System.Text;

namespace Innovoft.IO
{
	partial class BufferSplitReader
	{
		#region Methods
<#
	line = false;
#>
<#
	foreach (var separator in separators)
	{
		foreach (var method in methods)
		{
			if (line)
			{
#>

<#
			}
			else
			{
				line = true;
			}
			string parameters;
			string where;
			if (separator.Generic)
			{
				parameters = "<TSeparator>";
				where = "where TSeparator: " + separator.Type;
			}
			else
			{
				parameters = "";
				where = null;
			}
#>
		public bool ReadColumns<#= method.Name #><#= parameters #>(<#= separator.Generic ? "TSeparator" : separator.Type #> separator, Func<Action<byte[], int, int>> add)
<#
			if (separator.Generic)
			{
#>
			<#= where #>
<#
			}
#>
		{
			if (stream == null)
			{
				throw new ObjectDisposedException(nameof(BufferSplitReader));
			}
			if (bufferOffset >= bufferLength && !ReadBuffer())
			{
				return false;
			}
			var offset = bufferOffset;
			var append = add();
			while (true)
			{
				var letter = buffer[bufferOffset];
				switch (letter)
				{
				case CR:
					append(buffer, offset, <#= method.Math #>);
					++bufferOffset;
					//LF
					if (bufferOffset >= bufferLength)
					{
						if (!ReadBuffer())
						{
							return true;
						}
					}
					if (buffer[bufferOffset] == LF)
					{
						++bufferOffset;
					}
					return true;

				case LF:
					append(buffer, offset, <#= method.Math #>);
					++bufferOffset;
					return true;

				default:
					if (<#= separator.Test #>)
					{
						append(buffer, offset, <#= method.Math #>);
						offset = ++bufferOffset;
						append = add();
						break;
					}
					else
					{
						++bufferOffset;
					}
					break;
				}
				if (bufferOffset >= bufferLength)
				{
					if (offset <= bufferOffset)
					{
						append(buffer, offset, <#= method.Math #>);
					}
					if (!ReadBuffer())
					{
						return true;
					}
					offset = 0;
				}
			}
		}
<#
		}
	}
#>
<#
	foreach (var separator in separators)
	{
		foreach (var method in methods)
		{
			if (line)
			{
#>

<#
			}
			else
			{
				line = true;
			}
			string parameters;
			string where;
			if (separator.Generic)
			{
				parameters = "<TSeparator>";
				where = "where TSeparator: " + separator.Type;
			}
			else
			{
				parameters = "";
				where = null;
			}
#>
		public bool ReadColumns<#= method.Name #><#= parameters #>(<#= separator.Generic ? "TSeparator" : separator.Type #> separator, int column, Action<byte[], int, int> append)
<#
			if (separator.Generic)
			{
#>
			<#= where #>
<#
			}
#>
		{
			if (stream == null)
			{
				throw new ObjectDisposedException(nameof(BufferSplitReader));
			}
			if (bufferOffset >= bufferLength && !ReadBuffer())
			{
				return false;
			}
			var offset = bufferOffset;
			while (true)
			{
				var letter = buffer[bufferOffset];
				switch (letter)
				{
				case CR:
					if (column == 0)
					{
						append(buffer, offset, <#= method.Math #>);
					}
					++bufferOffset;
					//LF
					if (bufferOffset >= bufferLength)
					{
						if (!ReadBuffer())
						{
							return true;
						}
					}
					if (buffer[bufferOffset] == LF)
					{
						++bufferOffset;
					}
					return true;

				case LF:
					if (column == 0)
					{
						append(buffer, offset, <#= method.Math #>);
						++bufferOffset;
						return true;
					}
					else
					{
						++bufferOffset;
						return true;
					}

				default:
					if (<#= separator.Test #>)
					{
						if (column == 0)
						{
							append(buffer, offset, <#= method.Math #>);
							column = -1;
							break;
						}
						else
						{
							offset = ++bufferOffset;
							--column;
							break;
						}
					}
					else
					{
						++bufferOffset;
					}
					break;
				}
				if (bufferOffset >= bufferLength)
				{
					if (column == 0)
					{
						if (offset <= bufferOffset)
						{
							append(buffer, offset, <#= method.Math #>);
						}
					}
					if (!ReadBuffer())
					{
						return true;
					}
					offset = 0;
				}
			}
		}
<#
		}
	}
#>
<#
	foreach (var separator in separators)
	{
		foreach (var appends in appendss)
		{
			foreach (var method in methods)
			{
				if (line)
				{
#>

<#
				}
				else
				{
					line = true;
				}
				var generic = separator.Generic || appends.Generic;
				string parameters;
				string where;
				if (generic)
				{
					var parameterss = new List<string>(3);
					var wheres = new List<string>(3);
					if (separator.Generic)
					{
						parameterss.Add("TSeparator");
						wheres.Add("where TSeparator: " + separator.Type);
					}
					if (appends.Generic)
					{
						parameterss.Add("TAppends");
						wheres.Add("where TAppends: " + appends.Type);
					}
					parameters = "<" + string.Join(", ", parameterss) + ">";
					where = string.Join(" ", wheres);
				}
				else
				{
					parameters = "";
					where = null;
				}
#>
		public bool ReadColumns<#= method.Name #><#= appends.Name #><#= parameters #>(<#= separator.Generic ? "TSeparator" : separator.Type #> separator, <#= appends.Generic ? "TAppends" : appends.Type #> appends)
<#
				if (generic)
				{
#>
			<#= where #>
<#
				}
#>
		{
			if (stream == null)
			{
				throw new ObjectDisposedException(nameof(BufferSplitReader));
			}
			if (bufferOffset >= bufferLength && !ReadBuffer())
			{
				return false;
			}
			var offset = bufferOffset;
			var column = 0;
			Action<byte[], int, int> append;
			<#= appends.Get #>;
			while (true)
			{
				var letter = buffer[bufferOffset];
				switch (letter)
				{
				case CR:
					//Column
					append?.Invoke(buffer, offset, <#= method.Math #>);
					++bufferOffset;
					//LF
					if (bufferOffset >= bufferLength)
					{
						if (!ReadBuffer())
						{
							return true;
						}
					}
					if (buffer[bufferOffset] == LF)
					{
						++bufferOffset;
					}
					return true;

				case LF:
					//Column
					append?.Invoke(buffer, offset, <#= method.Math #>);
					++bufferOffset;
					return true;

				default:
					if (<#= separator.Test #>)
					{
						append?.Invoke(buffer, offset, <#= method.Math #>);
						offset = ++bufferOffset;
						++column;
						<#= appends.Get #>;
						break;
					}
					else
					{
						++bufferOffset;
						break;
					}
				}
				if (bufferOffset >= bufferLength)
				{
					if (offset <= bufferOffset)
					{
						append?.Invoke(buffer, offset, <#= method.Math #>);
					}
					if (!ReadBuffer())
					{
						return true;
					}
					offset = 0;
				}
			}
		}
<#
			}
		}
	}
#>
		#endregion //Methods
	}
}
